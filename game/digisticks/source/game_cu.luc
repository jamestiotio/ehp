module game_cu (
    input clk,  // clock
    input rst,  // reset
    
    input from[16], // fixed read port from REGFILE (R6)
    input to[16],   // fixed read port from REGFILE (R7)
    input alu_output[16],
    input turn[16], // fixed read port from REGFILE (R11)

    input reset_button_pressed,
    
    input p1r,  // button of player 1 right hand (R0)
    input p1l,  // button of player 1 left hand (R1)
    input p2r,  // button of player 2 right hand (R2)
    input p2l,  // button of player 2 left hand (R3)
    input powerup, // powerup button
    input toggle,  // toggle button
    
    output alufn[6],
    output asel,
    output bsel[2],
    output wdsel[2],
    output ra[4],
    output rb[4],
    output rc[4],
    output powerup_yes,
    output split_yes
  ) {
  
  .clk(clk) {
    fsm game_fsm = {
      //START,
      RESET,
      CHECK_HAND,
      // CHECK_HAND_POST,
      STORE_IN_FROM,
      STORE_IN_TO,
      
      // ATTACK
      ADD_ATTACK,
      MOD_ATTACK,
      
      // SPLIT
      GO_TO_SPLIT,  // 1?
      TOGGLE_ADD_SPLIT,
      TOGGLE_MOD_SPLIT,
      CHECK_SPLIT,
      //CHECK_SPLIT_POST,
      ADD_SPLIT,  // ADD_MOD_SUB
      MOD_SPLIT,
      SUB_SPLIT,
      
      // POWERUP
      POWERUP,   // AND
      CHOOSE_POWERUP_ADD,
      CHOOSE_POWERUP_MOD,
      WAIT_FOR_FROM_POWERUP,
      STORE_FROM_POWERUP,
      STORE_TO_POWERUP,
      READ_R9,
      DO_OP_POWERUP,  // DO_OP_MOD
      MOD_POWERUP,
     
      UPDATE_TURN,
      
      P1,
      CHECK_P2_RIGHT,
      //CHECK_P2_RIGHT_POST,
      CHECK_P2_LEFT,
      //CHECK_P2_LEFT_POST,
      P1_WINS,
      
      P2,
      CHECK_P1_RIGHT,
      //CHECK_P1_RIGHT_POST,
      CHECK_P1_LEFT,
      //CHECK_P1_LEFT_POST,
      P2_WINS,
      
      GAME_OVER
      };
   }

  always {
    alufn = 6b0;
    asel = b0;
    bsel = b00;
    wdsel = b00;
    ra = b1111;
    rb = b1111;
    rc = b1111; //set by default go to R15 (always 0)
    powerup_yes = 0;
    split_yes = 0;
    
    if (rst) {
      game_fsm.d = game_fsm.RESET;
    }

    if (reset_button_pressed && game_fsm.q != game_fsm.RESET) {
      game_fsm.d = game_fsm.RESET;
    }

    case(game_fsm.q) {
  
      //game_fsm.START:
        //game_fsm.d = game_fsm.RESET; 
        
      game_fsm.RESET:
        game_fsm.d = game_fsm.P1;
        
      game_fsm.CHECK_HAND:
        alufn = b110110; // CMPEQ: 11011X
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = from[3:0];
        rb = b1111;
        rc = b1111;
        if (alu_output == 16b1) {
          game_fsm.d = game_fsm.P1;
        } else {
          game_fsm.d = game_fsm.STORE_IN_TO;      
        } 
        
      game_fsm.STORE_IN_FROM:
        if (p1r) {
          alufn = b011010; // 'X'
          asel = b0;
          wdsel = b00;
          ra = b1111; // R15
          rc = b0110; // R6
        }
        else if (p1l) {
          wdsel = b01;
          rc = b0110;
        }
        else if (p2r) {
          alufn = b011010; // 'X'
          asel = b1;
          wdsel = b00;
          rc = b0110;
        }
        else if (p2l) {
          wdsel = b10;
          rc = b0110;
        }
        if (p1r | p1l | p2r | p2l) {
          game_fsm.d = game_fsm.CHECK_HAND;
        }
        
      game_fsm.STORE_IN_TO:
        if (p1r) {
          alufn = b011010; // 'X'
          asel = b0;
          wdsel = b00;
          ra = b1111; // R15
          rc = b0111; // R7
        }
        else if (p1l) {
          wdsel = b01;
          rc = b0111;
        }
        else if (p2r) {
          alufn = b011010; // 'X'
          asel = b1;
          wdsel = b00;
          rc = b0111;
        }
        else if (p2l) {
          wdsel = b10;
          rc = b0111;
        }       
        case (turn){    // CHECK TURN
          16b0:
            if (p1l | p1r) {
              game_fsm.d = game_fsm.GO_TO_SPLIT;
            }  
          16b1:
            if (p2l | p2r) {
              game_fsm.d = game_fsm.ADD_ATTACK;
            }
        }
            
      // ATTACK     
      game_fsm.ADD_ATTACK:
        alufn = 000000;  // ADD: 0000X0
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = to[3:0];
        rb = from[3:0];
        rc = to[3:0];
        game_fsm.d = game_fsm.MOD_ATTACK;
       
      game_fsm.MOD_ATTACK:
        alufn = b000110;  // MOD
        asel = b0;
        bsel = b10;
        wdsel = b00;
        ra = to[3:0];
        rc = to[3:0];
        if (turn == 16b0) {
          game_fsm.d = game_fsm.CHECK_P2_RIGHT;
        }
        else {
          game_fsm.d = game_fsm.CHECK_P1_RIGHT;
        }
        
      // SPLIT
      game_fsm.GO_TO_SPLIT:
        split_yes = 1;
        wdsel = b01;
        rc = b1000;  // R8 (LITERAL)
        // show 1 on seven segment
         if (powerup) {
          game_fsm.d = game_fsm.ADD_SPLIT;
        } else if(toggle){
          game_fsm.d = game_fsm.CHECK_SPLIT;
        }              
        
      game_fsm.TOGGLE_ADD_SPLIT:
        split_yes = 1;
        alufn = b000000;  // ADD: 0000X0
        asel = b0;
        bsel = b01;
        wdsel = b00;
        ra = b1000;  // R8
        rc = b1000;
         if (powerup) {
          game_fsm.d = game_fsm.ADD_SPLIT;
        } else if (toggle){
          game_fsm.d = game_fsm.CHECK_SPLIT;
        }
        
      game_fsm.CHECK_SPLIT:
        split_yes = 1;
        alufn = 6b110110;  // CMPLE: 11011X
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b1000;      // R8
        rb = from[3:0]; // FROM
        rc = b1111;      // R15
        if (alu_output == 16b1) {
            game_fsm.d = game_fsm.TOGGLE_ADD_SPLIT;
          } else if (alu_output == 16b0){
            game_fsm.d = game_fsm.GO_TO_SPLIT;
          }           
        
      game_fsm.ADD_SPLIT:
        split_yes = 1;
        alufn = b000000;  // ADD: 0000X0
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b1000;
        rb = to[3:0];
        rc = to[3:0];
        game_fsm.d = game_fsm.MOD_SPLIT;
      
      game_fsm.MOD_SPLIT:
        split_yes = 1;
        alufn = b000111;  // MOD
        asel = b0;
        bsel = b10;
        wdsel = b00;
        ra = to[3:0];
        rc = to[3:0];
        game_fsm.d = game_fsm.SUB_SPLIT;
        
      game_fsm.SUB_SPLIT:
        split_yes = 1;
        alufn = b000001;  // SUB: 0000X1
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b1000;   // R8
        rb = from[3:0];
        rc = from[3:0];
        game_fsm.d = game_fsm.UPDATE_TURN;
       
      // POWERUP
      game_fsm.POWERUP:
        powerup_yes = 1;
        wdsel = b01;
        rc = b1001;  // R9
        if (toggle) {
          game_fsm.d = game_fsm.CHOOSE_POWERUP_ADD;
        }
     
      game_fsm.CHOOSE_POWERUP_ADD:
        powerup_yes = 1;
        alufn = b000000;  // ADD: 0000X0
        asel = b0;
        bsel = b01;
        wdsel = b00;
        ra = b1001;  // R9
        rc = b1001;
        game_fsm.d = game_fsm.CHOOSE_POWERUP_MOD;
        
      game_fsm.CHOOSE_POWERUP_MOD:
        powerup_yes = 1;
        alufn = b000111;  // MOD
        asel = b0;
        bsel = b11;
        wdsel = b00;
        ra = b1001;
        rc = b1001;
        // show in seven seegment
        if (toggle) {
        game_fsm.d = game_fsm.CHOOSE_POWERUP_ADD;
        }
        if (powerup) {
          game_fsm.d = game_fsm.WAIT_FOR_FROM_POWERUP;
        }
        
      game_fsm.WAIT_FOR_FROM_POWERUP:
        powerup_yes = 1;
        case (turn) {
          16b0:
            if (p1r | p1l) {
              game_fsm.d = game_fsm.STORE_FROM_POWERUP;
            }
          16b1:
            if (p2r | p2l) {
              game_fsm.d = game_fsm.STORE_FROM_POWERUP;
            }
        }
        
      game_fsm.STORE_FROM_POWERUP:
        powerup_yes = 1;
        if (p1r) {
          alufn = b011010; // 'X'
          asel = b0;
          wdsel = b00;
          ra = b1111; // R15
          rc = b0110; // R6
        }
        else if (p1l) {
          wdsel = b01;
          rc = b0110;
        }
        else if (p2r) {
          alufn = b011010; // 'X'
          asel = b1;
          wdsel = b00;
          rc = b0110;
        }
        else if (p2l) {
          wdsel = b10;
          rc = b0110;
        }
        case (turn) {
          16b0:
            if (p2r | p2l) {
              game_fsm.d = game_fsm.STORE_TO_POWERUP;
            }
          16b1:
            if (p1r | p1l) {
              game_fsm.d = game_fsm.STORE_TO_POWERUP;
            }
        }
        
      game_fsm.STORE_TO_POWERUP:
        powerup_yes = 1;
        if (p1r) {
          alufn = b011010; // 'X'
          asel = b0;
          wdsel = b00;
          ra = b1111; // R15
          rc = b0111; // R7
        }
        else if (p1l) {
          wdsel = b01;
          rc = b0111;
        }
        else if (p2r) {
          alufn = b011010; // 'X'
          asel = b1;
          wdsel = b00;
          rc = b0111;
        }
        else if (p2l) {
          wdsel = b10;
          rc = b0111;
        }
        if (p1r | p1l | p2r | p2l) {
          game_fsm.d = game_fsm.READ_R9;
        }
        
      game_fsm.READ_R9:
        alufn = b000000;  // ADD: 0000X0
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b1111;  // R15
        rb = b1001;  // R9
        rc = b1111;
        game_fsm.d = game_fsm.DO_OP_POWERUP;
              
      game_fsm.DO_OP_POWERUP:
        powerup_yes = 1;
        case (alu_output[3:0]) {
          b0000:
            alufn = b010101;  // NOT'Y'
          b0001:
            alufn = b011000;  // AND     
          b0010:
            alufn = b010111;  // NAND
          b0011:
            alufn = b011110;  // OR
          b0100:
            alufn = b010001;  // NOR
          b0101:
            alufn = b010110;  // XOR
          b0110:
            alufn = b011001;  // XNOR
          b0111:
            alufn = b011010;  // 'X'
          b1000:
            alufn = b010011;  // NOT'X' 
        }
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = to[3:0];
        rb = from[3:0];
        rc = to[3:0];
        game_fsm.d = game_fsm.MOD_POWERUP;
        
      game_fsm.MOD_POWERUP:
        powerup_yes = 1;
        alufn = b000111;  // MOD
        asel = b0;
        bsel = b10;
        wdsel = 00;
        ra = to[3:0];
        rc = to[3:0];
        if (turn == 16b0) {
          game_fsm.d = game_fsm.CHECK_P2_RIGHT;
        }
        else {
          game_fsm.d = game_fsm.CHECK_P1_RIGHT;
        }
        
      game_fsm.P1:
         if (powerup) {
           game_fsm.d = game_fsm.POWERUP;
      }
        else if (p1l | p1r ) {
          game_fsm.d = game_fsm.STORE_IN_FROM;
      }     
        
      game_fsm.P2:
         if (powerup) {
           game_fsm.d = game_fsm.POWERUP;
      }
        else if (p2l | p2r ) {
          game_fsm.d = game_fsm.STORE_IN_FROM;
      }
        
      game_fsm.CHECK_P2_RIGHT:
        alufn = b110110; // CMPEQ: 11011X
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b0010;  // R2
        rb = b1111;  // R15
        rc = b1111;  
        //game_fsm.d = game_fsm.CHECK_P1_RIGHT_POST;
        if (alu_output == 16b1) {
          game_fsm.d = game_fsm.CHECK_P2_LEFT;
        }
        else{
          game_fsm.d = game_fsm.P2;
        }
        
      // game_fsm.CHECK_P2_RIGHT_POST:
        
        
      game_fsm.CHECK_P2_LEFT:
        alufn = b110110; // CMPEQ: 11011X
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b0011;  // R3
        rb = b1111;
        rc = b1111;
        // game_fsm.d = game_fsm.CHECK_P2_LEFT_POST;
        if (alu_output == 16b1) {
          game_fsm.d = game_fsm.P1_WINS;
        }
        else{
          game_fsm.d = game_fsm.P2;
        }  
        
      // game_fsm.CHECK_P2_LEFT_POST:
        
        
      game_fsm.P1_WINS:
        alufn = b000000;  // ADD: 0000X0
        asel = b0;
        bsel = b01;
        wdsel = b00;
        ra = b1011;  // R11
        rc = b1010;  // R10
        game_fsm.d = game_fsm.GAME_OVER;
        
      game_fsm.CHECK_P1_RIGHT:
        alufn = b110110; // CMPEQ: 11011X
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b0000;  // R1
        rb = b1111;  // R15
        rc = b1111;  
        // game_fsm.d = game_fsm.CHECK_P1_RIGHT_POST;
        if (alu_output == 16b1) {
          game_fsm.d = game_fsm.CHECK_P1_LEFT;
        }
        else{
          game_fsm.d = game_fsm.P2;
        }
        
      // game_fsm.CHECK_P1_RIGHT_POST:
        
        
      game_fsm.CHECK_P1_LEFT:
        alufn = b110110; // CMPEQ: 11011X
        asel = b0;
        bsel = b00;
        wdsel = b00;
        ra = b0010;  // R2
        rb = b1111;
        rc = b1111; 
        // game_fsm.d = game_fsm.CHECK_P1_LEFT_POST;   
        if (alu_output == 16b1) {
          game_fsm.d = game_fsm.P2_WINS;
        }
        else{
          game_fsm.d = game_fsm.P2;
        }        
    
      // game_fsm.CHECK_P1_LEFT_POST:
        
      
      game_fsm.P2_WINS:
        alufn = b000000;  // ADD: 0000X0
        asel = b0;
        bsel = b01;
        wdsel = b00;
        ra = b1011;  // R11
        rc = b1010;  // R10
        game_fsm.d = game_fsm.GAME_OVER;
        
      game_fsm.UPDATE_TURN:
        alufn = b010110; //XOR
        asel = b0;
        bsel = b01;
        wdsel = b00;
        ra = b1011;   // R11
        rc = b1011;  
        if (turn == 16b0) {
          game_fsm.d = game_fsm.P2;
        } else {
          game_fsm.d = game_fsm.P1;
        }
        
      game_fsm.GAME_OVER:
        //show sth on seven segment or leds?
        game_fsm.d = game_fsm.GAME_OVER;
     
}
  