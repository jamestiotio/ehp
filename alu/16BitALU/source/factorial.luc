// Implement factorial function using FSM instead of for loop (which will result in a non-converging loop condition during build)

module factorial (
    input clk,  // clock
    input rst,  // reset
    input x[16],
    output s[16]
  ) {
  
  .clk(clk), .rst(rst) {
    fsm factorial_state = {START, MULTIPLY, FINISH};
    dff counter[16];
    dff trans_out[16];
  }

  always {
    trans_out.d = trans_out.q;
    counter.d = counter.q;
    s = 0;

    case (factorial_state.q) {
      factorial_state.START:
        trans_out.d = 1;
        counter.d = 1;

        if ($unsigned(x) == 0) {
          factorial_state.d = factorial_state.FINISH;
        }

        else {
          factorial_state.d = factorial_state.MULTIPLY;
        }

      factorial_state.MULTIPLY:
        trans_out.d = trans_out.q * counter.q;

        if (counter.q == $unsigned(x)) {
          factorial_state.d = factorial_state.FINISH;
        }

        else {
          counter.d = counter.q + 1;
        }

      factorial_state.FINISH:
        counter.d = counter.q;
        s = trans_out.q;
      
      default:
        s = 0;
  }
}