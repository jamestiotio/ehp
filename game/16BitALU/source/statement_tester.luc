// This statement_tester cycles through the states defined in the following FSM to display the values of X, Y and OUTPUT from the ALU.
// It starts cycling through the states when the start signal is put to HIGH
// State transitions occur on the rising clock edge of slow_clock, which has a period of about 0.65 seconds
// The cycle terminates at either DONE or ERROR_2
// The DONE state will output the done signal as HIGH and displays the letter "d" on the 7-segment seg_display
// The ERROR_2 state will display the letter "E" on the 7-segment seg_display

module statement_tester #(
    INPUT_X,
    INPUT_Y,
    OPCODE,
    EXPECTED_OUTPUT
  ) (
    input clk,  // clock
    input rst,  // reset
    input start,
    output io_seg[8],
    output io_sel[4],
    output opcode_led[6],
    output done
  ) {

  .clk(clk) {
    edge_detector slow_clk_edge (#RISE(1), #FALL(0));

    .rst(rst) {
      fsm state = {INIT, DISP_X_1, DISP_X_2, DISP_Y_1, DISP_Y_2, DISP_OUT_1, DISP_OUT_2, DONE, ERROR_1, ERROR_2};
      dff out[16];
      counter slow_clock (#SIZE(1), #DIV(25)); // Clock with a period of about 0.65 seconds
      multi_seven_seg seg_display;
    }
  }

  sig alufn[6];
  sig x[16];
  sig y[16];
  alu16 alu (.alufn(alufn), .x(x), .y(y));

  always {
    done = 0;
    slow_clk_edge.in = slow_clock.value;
    io_seg = 8hff;
    io_sel = 4hf;
    seg_display.values = {4b0,4b0,4b0,4b0};

    alufn = OPCODE;
    x = INPUT_X;
    y = INPUT_Y;
    out.d = alu.out;

    opcode_led = OPCODE;

    case (state.q) {
      state.INIT:
        if (start) {
          state.d = state.DISP_X_1;
        }

      state.DISP_X_1:
        io_seg = 8b10001001;
        io_sel = 4b1110;
        if (slow_clk_edge.out) {
          state.d = state.DISP_X_2;
        }

      state.DISP_X_2:
        seg_display.values = {x[15:12], x[11:8], x[7:4], x[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        if (slow_clk_edge.out) {
          state.d = state.DISP_Y_1;
        }

      state.DISP_Y_1:
        io_seg = 8b10010001;
        io_sel = 4b1110;
        if (slow_clk_edge.out) {
          state.d = state.DISP_Y_2;
        }

      state.DISP_Y_2:
        seg_display.values = {y[15:12], y[11:8], y[7:4], y[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        if (slow_clk_edge.out) {
          state.d = state.DISP_OUT_1;
        }

      state.DISP_OUT_1:
        io_seg = 8b11000000;
        io_sel = 4b1110;
        if (slow_clk_edge.out) {
          state.d = state.DISP_OUT_2;
        }

      state.DISP_OUT_2:
        seg_display.values = {out.q[15:12], out.q[11:8], out.q[7:4], out.q[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;

        if (slow_clk_edge.out && out.q == EXPECTED_OUTPUT) {
          state.d = state.DONE;
        }

        else if (slow_clk_edge.out && out.q != EXPECTED_OUTPUT) {
          state.d = state.ERROR_1;
        }

      state.DONE:
        io_seg = 8b10100001;
        io_sel = 4b1110;
        opcode_led = 6b000000;
        done = 1;

      state.ERROR_1:
        seg_display.values = {out.q[15:12], out.q[11:8], out.q[7:4], out.q[3:0]};
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;

        if (slow_clk_edge.out) {
          state.d = state.ERROR_2;
        }

      state.ERROR_2:
        io_seg = 8b10000110;
        io_sel = 4b1110;
    }
  }
}
