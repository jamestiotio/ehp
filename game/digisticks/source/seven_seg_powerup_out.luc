module seven_seg_powerup_out (
    input clk,  // clock
    input rst,  // reset
    
    input powerup_chosen[16], // from regfile, reads register's value
    output seg_tolight[7],
    output dig_tolight[4]
  ) {
  .clk(clk) {
    .rst(rst) {
      multi_seven_seg seg_display;
    }
  }

  always {
    seg_tolight = 0;
    dig_tolight = 0;
    seg_display.values = {5b0,5b0,5b0,5b0};
    case (powerup_chosen) {
      16h0000: seg_display.values = {5b10101,5b10100,5b10000,5b10001}; // NOT 'Y'
      16h0001: seg_display.values = {5b01101,5b10001,5b01010,5b11111}; // AND
      16h0002: seg_display.values = {5b01101,5b10001,5b01010,5b10001}; // NAND
      16h0003: seg_display.values = {5b10010,5b10000,5b11111,5b11111}; // OR 
      16h0004: seg_display.values = {5b10010,5b10000,5b10001,5b11111}; // NOR
      16h0005: seg_display.values = {5b10010,5b10000,5b10011,5b11111}; // XOR
      16h0006: seg_display.values = {5b10010,5b10000,5b10001,5b10011}; // XNOR
      16h0007: seg_display.values = {5b10011,5b11111,5b11111,5b11111}; // 'X'
      16h0008: seg_display.values = {5b10011,5b10100,5b10000,5b10001}; // NOT 'X'
      default: seg_display.values = {5b11111,5b11111,5b11111,5b11111};
    }
    seg_tolight = ~seg_display.seg;
    dig_tolight = ~seg_display.sel;
  }
}