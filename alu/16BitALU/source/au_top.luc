module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;// reset signal
  alu16 alu16;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst){
      fsm state = {STOREA,STOREB,STOREALUFN,CALCULATE};
      dff storea[16];
      dff storeb[16];
      dff storealufn[6];
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    

    alu16.x = 16b0;
    alu16.y = 16b0;
    alu16.alufn = 6b0;
      
    case(state.q){
        state.STOREA:
          storea.d = c{io_dip[1],io_dip[0]};
          if (io_button[1]){
            state.d = state.STOREB;
          }
          else{
            state.d = state.STOREA;
          }
        state.STOREB:
          storeb.d = c{io_dip[1],io_dip[0]};
          if(io_button[1]){
            state.d = state.STOREALUFN;
          }
          else{
            state.d = state.STOREB;
          }
        state.STOREALUFN:
          storealufn.d = io_dip[0][5:0];
          if(io_button[1]){
            state.d = state.CALCULATE;
          }
          else{
            state.d = state.STOREALUFN;
          }
        state.CALCULATE:
          alu16.x = storea.q;
          alu16.y = storeb.q;
          alu16.alufn = storealufn.q;
          io_led[0] = alu16.out[7:0];
          io_led[1] = alu16.out[15:8];
          if(io_button[1]){
            state.d = state.STOREA;
          }
          else{
            state.d = state.CALCULATE;
          }
      }
          
          
  }
}