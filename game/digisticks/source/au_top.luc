module au_top (
    input clk,                    // 100MHz clock
    input rst_n,                  // reset button (active low)
    output led [8],               // 8 user controllable LEDs
    input usb_rx,                 // USB->Serial input
    output usb_tx,                // USB->Serial output
    input player1_button [4],     // IO Buttons for Player 1
    input player2_button [4],     // IO Buttons for Player 2
    input player1_button_powerup, // Player 1 Powerup Button
    input player1_button_sevenseg,// Player 1 7-Seg Button
    input player2_button_powerup, // Player 2 Powerup Button
    input player2_button_sevenseg,// Player 2 7-Seg Button
    input reset_button,           // Game Reset Button
    output finger_leds [4][4],    // LEDs to represent fingers
    output seven_seg_p1_sel [4],  // Common Cathode seven-segment display digit select for Player 1
    output seven_seg_p1_seg [7],  // Common Cathode seven-segment display segment LEDs for Player 1 (without decimal point)
    output seven_seg_p2_sel [4],  // Common Cathode seven-segment display digit select for Player 2
    output seven_seg_p2_seg [7],  // Common Cathode seven-segment display segment LEDs for Player 2 (without decimal point)
    output io_led [6]             // DifferentialIO-only output pins of IO LEDs on FPGA (Alchitry IO) for debug purposes
  ) {

  sig rst; // reset signal

  sig game_reset_sig;

  sig p1tl;
  sig p1tr;
  sig p1bl;
  sig p1br;
  sig p1powerup;
  sig p1sevenseg;
  sig p2tl;
  sig p2tr;
  sig p2bl;
  sig p2br;
  sig p2powerup;
  sig p2sevenseg;

  sig turn[16];

  sig powerup_boolean;
  sig powerup_choice[16];

  sig split_boolean;
  sig split_choice[16];

  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;

    button_conditioner player1_topleft;
    button_conditioner player1_topright;
    button_conditioner player1_bottomleft;
    button_conditioner player1_bottomright;
    button_conditioner player1_powerup_button;
    button_conditioner player1_sevenseg_button;

    button_conditioner player2_topleft;
    button_conditioner player2_topright;
    button_conditioner player2_bottomleft;
    button_conditioner player2_bottomright;
    button_conditioner player2_powerup_button;
    button_conditioner player2_sevenseg_button;

    button_conditioner game_reset_button;

    edge_detector p1_tl (#RISE(1), #FALL(0));
    edge_detector p1_tr (#RISE(1), #FALL(0));
    edge_detector p1_bl (#RISE(1), #FALL(0));
    edge_detector p1_br (#RISE(1), #FALL(0));
    edge_detector p1_powerup (#RISE(1), #FALL(0));
    edge_detector p1_sevenseg (#RISE(1), #FALL(0));

    edge_detector p2_tl (#RISE(1), #FALL(0));
    edge_detector p2_tr (#RISE(1), #FALL(0));
    edge_detector p2_bl (#RISE(1), #FALL(0));
    edge_detector p2_br (#RISE(1), #FALL(0));
    edge_detector p2_powerup (#RISE(1), #FALL(0));
    edge_detector p2_sevenseg (#RISE(1), #FALL(0));

    edge_detector game_reset (#RISE(1), #FALL(0));

    .rst(rst) {
      seven_seg_powerup_out powerup_display;
      seven_seg_split_out split_display;

      game_cu control_unit;
      game_regfile register_file;
    }
  }

  alu16 alu;
  button_muxes muxes;

  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset

    usb_tx = usb_rx;        // loop serial port

    led = 8h00;             // turn LEDs off

    io_led = 6h00;          // turn LEDs off

    // --- DEFINE INPUTS --- //

    // Detect button signals
    player1_topleft.in = player1_button[0];
    p1_tl.in = player1_topleft.out;
    p1tl = p1_tl.out;

    player1_topright.in = player1_button[1];
    p1_tr.in = player1_topright.out;
    p1tr = p1_tr.out;

    player1_bottomleft.in = player1_button[2];
    p1_bl.in = player1_bottomleft.out;
    p1bl = p1_bl.out;

    player1_bottomright.in = player1_button[3];
    p1_br.in = player1_bottomright.out;
    p1br = p1_br.out;

    player1_powerup_button.in = player1_button_powerup;
    p1_powerup.in = player1_powerup_button.out;
    p1powerup = p1_powerup.out;

    player1_sevenseg_button.in = player1_button_sevenseg;
    p1_sevenseg.in = player1_sevenseg_button.out;
    p1sevenseg = p1_sevenseg.out;

    player2_topleft.in = player2_button[0];
    p2_tl.in = player2_topleft.out;
    p2tl = p2_tl.out;

    player2_topright.in = player2_button[1];
    p2_tr.in = player2_topright.out;
    p2tr = p2_tr.out;

    player2_bottomleft.in = player2_button[2];
    p2_bl.in = player2_bottomleft.out;
    p2bl = p2_bl.out;

    player2_bottomright.in = player2_button[3];
    p2_br.in = player2_bottomright.out;
    p2br = p2_br.out;

    player2_powerup_button.in = player2_button_powerup;
    p2_powerup.in = player2_powerup_button.out;
    p2powerup = p2_powerup.out;

    player2_sevenseg_button.in = player2_button_sevenseg;
    p2_sevenseg.in = player2_sevenseg_button.out;
    p2sevenseg = p2_sevenseg.out;

    game_reset_button.in = reset_button;
    game_reset.in = game_reset_button.out;
    game_reset_sig = game_reset.out;
    
    control_unit.reset_button_pressed = game_reset_sig;

    // Select button signals using button_muxes and pass signal to CU for further processing
    muxes.p1_p1l = p1bl;
    muxes.p1_p1r = p1br;
    muxes.p1_p2r = p1tl;
    muxes.p1_p2l = p1tr;
    muxes.p2_p2l = p2bl;
    muxes.p2_p2r = p2br;
    muxes.p2_p1r = p2tl;
    muxes.p2_p1l = p2tr;
    muxes.p1_toggle = p1sevenseg;
    muxes.p2_toggle = p2sevenseg;
    muxes.p1_powerup = p1powerup;
    muxes.p2_powerup = p2powerup;

    muxes.turn = register_file.turn_out;

    // Pass IO signals between CU, REGFILE & ALU

    // CU
    control_unit.p1l = muxes.p1l;
    control_unit.p1r = muxes.p1r;
    control_unit.p2l = muxes.p2l;
    control_unit.p2r = muxes.p2r;
    control_unit.toggle = muxes.toggle;
    control_unit.powerup = muxes.powerup;
    control_unit.from = register_file.from_out;
    control_unit.to = register_file.to_out;
    control_unit.turn = register_file.turn_out;
    control_unit.powerup_chosen = register_file.powerup_out;

    // REGFILE
    register_file.ra = control_unit.ra;
    register_file.rb = control_unit.rb;
    register_file.rc = control_unit.rc;

    // ALU
    alu.asel = control_unit.asel;
    alu.bsel = control_unit.bsel;
    alu.wdsel = control_unit.wdsel;
    alu.alufn = control_unit.alufn;
    alu.x = register_file.ra_data;
    alu.y = register_file.rb_data;

    control_unit.alu_output = alu.out;
    register_file.data = alu.out;

    // --- DEFINE OUTPUTS --- //

    // Give output to LEDs
    finger_leds = 4x{{4h0}};

    if (register_file.player1left == 0) {
      finger_leds[0][3:0] = 4b0;
    }
    else if (register_file.player1left == 1) {
      finger_leds[0][3:1] = 3b0;
      finger_leds[0][0] = 1b1;
    }
    else if (register_file.player1left == 2) {
      finger_leds[0][3:2] = 2b0;
      finger_leds[0][1:0] = 2b11;
    }
    else if (register_file.player1left == 3) {
      finger_leds[0][3] = 1b0;
      finger_leds[0][2:0] = 3b111;
    }
    else if (register_file.player1left == 4) {
      finger_leds[0][3:0] = 4b1111;
    }

    if (register_file.player1right == 0) {
      finger_leds[1][3:0] = 4b0;
    }
    else if (register_file.player1right == 1) {
      finger_leds[1][3:1] = 3b0;
      finger_leds[1][0] = 1b1;
    }
    else if (register_file.player1right == 2) {
      finger_leds[1][3:2] = 2b0;
      finger_leds[1][1:0] = 2b11;
    }
    else if (register_file.player1right == 3) {
      finger_leds[1][3] = 1b0;
      finger_leds[1][2:0] = 3b111;
    }
    else if (register_file.player1right == 4) {
      finger_leds[1][3:0] = 4b1111;
    }

    if (register_file.player2left == 0) {
      finger_leds[2][3:0] = 4b0;
    }
    else if (register_file.player2left == 1) {
      finger_leds[2][3:1] = 3b0;
      finger_leds[2][0] = 1b1;
    }
    else if (register_file.player2left == 2) {
      finger_leds[2][3:2] = 2b0;
      finger_leds[2][1:0] = 2b11;
    }
    else if (register_file.player2left == 3) {
      finger_leds[2][3] = 1b0;
      finger_leds[2][2:0] = 3b111;
    }
    else if (register_file.player2left == 4) {
      finger_leds[2][3:0] = 4b1111;
    }

    if (register_file.player2right == 0) {
      finger_leds[3][3:0] = 4b0;
    }
    else if (register_file.player2right == 1) {
      finger_leds[3][3:1] = 3b0;
      finger_leds[3][0] = 1b1;
    }
    else if (register_file.player2right == 2) {
      finger_leds[3][3:2] = 2b0;
      finger_leds[3][1:0] = 2b11;
    }
    else if (register_file.player2right == 3) {
      finger_leds[3][3] = 1b0;
      finger_leds[3][2:0] = 3b111;
    }
    else if (register_file.player2right == 4) {
      finger_leds[3][3:0] = 4b1111;
    }

    powerup_boolean = control_unit.powerup_yes;

    powerup_choice = register_file.powerup_out;

    turn = register_file.turn_out;

    seven_seg_p1_sel = 0;
    seven_seg_p1_seg = 0;
    seven_seg_p2_sel = 0;
    seven_seg_p2_seg = 0;

    powerup_display.powerup_chosen = 16hffff;

    // Give output to 7-segments
    if (powerup_boolean) {
      powerup_display.powerup_chosen = powerup_choice;
      if (turn == 0) {
        seven_seg_p1_seg = powerup_display.seg_tolight;
        seven_seg_p1_sel = powerup_display.dig_tolight;
      }
      else if (turn == 1) {
        seven_seg_p2_seg = powerup_display.seg_tolight;
        seven_seg_p2_sel = powerup_display.dig_tolight;
      }
    }

    split_boolean = control_unit.split_yes;

    split_choice = register_file.literal_out;

    split_display.split_chosen = 16hffff;

    // Give output to 7-segments
    if (split_boolean) {
      split_display.split_chosen = split_choice;
      if (turn == 0) {
        seven_seg_p1_seg = split_display.seg_tolight;
        seven_seg_p1_sel = split_display.dig_tolight;
      }
      else if (turn == 1) {
        seven_seg_p2_seg = split_display.seg_tolight;
        seven_seg_p2_sel = split_display.dig_tolight;
      }
    }

    // Space for debug purposes
  }
}