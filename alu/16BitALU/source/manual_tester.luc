// This module is used to manually test the ALU
// This module cycles between the X, Y and OUTPUT states on the rising clock edge of the state_change_btn
// In the X & Y states, the values of c{io_dip[1], io_dip[0]} are written to the X & Y D Flip-Flops respectively
// The X & Y D Flip-Flops are connected to the ALU's X & Y inputs
// In the OUTPUT state, the output value from the ALU is displayed on c{io_sel[1], io_sel[0]}
// The OPCODE input value of the ALU is connected to io_dip[2][5:0]
// The OPCODE input value can be changed at anytime to change the output value from the ALU

module manual_tester (
    input clk,  // clock
    input rst,  // reset
    input io_dip[3][8],
    input state_change_btn,
    input forced_error,
    output io_seg[8],
    output io_sel[4],
    output io_led[3][8]
  ) {

  .clk(clk) {
    button_conditioner button_cond;
    button_conditioner required_error;
    edge_detector edge (#RISE(1), #FALL(0));
    edge_detector error_edge (#RISE(1), #FALL(0));

    .rst(rst) {
      fsm state = {X, Y, OUTPUT, ERROR_CHECK};
      dff x[16];
      dff y[16];
      dff out[16];
      dff alufn[6];
      dff error;
      multi_seven_seg seg_display;
      alu16 alu (.alufn(alufn.q), .x(x.q), .y(y.q)); // We need CLK and RST for ALU for factorial functionality
    }
  }

  sig state_change;
  sig compulsory_error;

  always {
    button_cond.in = state_change_btn;
    edge.in = button_cond.out;
    state_change = edge.out;

    required_error.in = forced_error;
    error_edge.in = required_error.out;
    compulsory_error = error_edge.out;

    io_sel = 4b1110;
    io_seg = 8b00000000;

    out.d = alu.out;
    error.d = alu.err;

    seg_display.values = {4b0,4b0,4b0,4b0};

    io_led = {8b0,8b0,8b0};
    io_led[2][5:0] = alufn.q;

    alufn.d = io_dip[2][5:0];

    case (state.q) {
      state.X:
        x.d = c{io_dip[1], io_dip[0]};
        io_led[1:0] = {x.q[15:8], x.q[7:0]};
        io_led[2][7:6] = 2b10;
        io_seg = 8b10001001; // X
        if (state_change) {
          state.d = state.Y;
        }
        if (compulsory_error) {
          state.d = state.ERROR_CHECK;
        }

      state.Y:
        y.d = c{io_dip[1], io_dip[0]};
        io_led[1:0] = {y.q[15:8], y.q[7:0]}; 
        io_led[2][7:6] = 2b01;
        io_seg = 8b10010001; // y
        if (state_change) {
          state.d = state.OUTPUT;
        }
        if (compulsory_error) {
          state.d = state.ERROR_CHECK;
        }

      state.OUTPUT:
        io_led[1:0] = {out.q[15:8], out.q[7:0]};
        io_led[2][7:6] = 2b11;
        io_seg = 8b10100011; // o
        if (error.q) {
          state.d = state.ERROR_CHECK;
        }
        if (state_change) {
          state.d = state.X;
        }
        if (compulsory_error) {
          state.d = state.ERROR_CHECK;
        }

      state.ERROR_CHECK:
        io_led = {8b0,8b0,8b0}; 
        seg_display.values = {4he, 4he, 4he, 4he}; // EEEE
        io_seg = ~seg_display.seg;
        io_sel = ~seg_display.sel;
        if (state_change) {
          state.d = state.X;
        }
    }
  }
}